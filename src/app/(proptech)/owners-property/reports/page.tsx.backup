'use client';

import React, { useState, useEffect } from 'react';
import { 
  FileText, 
  Plus, 
  Search, 
  Filter,
  Download,
  Mail,
  Eye,
  Calendar,
  User,
  TrendingUp,
  TrendingDown,
  CheckCircle,
  Clock,
  AlertCircle,
  BarChart3,
  PieChart,
  MoreHorizontal,
  Heart,
  MessageCircle,
  Share2,
  DollarSign,
  Target,
  Zap,
  Lightbulb,
  ArrowUpRight,
  ArrowDownRight,
  Star,
  Clock3,
  MapPin,
  Building,
  Home
} from 'lucide-react';
import { OwnersPropertyService, OwnerReport, Owner, OwnerProperty } from '@/services/ownersPropertyService';
import { useRouter } from 'next/navigation';
import ModernPopup from '@/components/ui/ModernPopup';

export default function ReportsPage() {
  const [reports, setReports] = useState<OwnerReport[]>([]);
  const [owners, setOwners] = useState<Owner[]>([]);
  const [ownerProperties, setOwnerProperties] = useState<OwnerProperty[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const [filterOwner, setFilterOwner] = useState('all');
  const [filterStatus, setFilterStatus] = useState('all');
  const [filterPeriod, setFilterPeriod] = useState('all');
  const [showGenerateModal, setShowGenerateModal] = useState(false);
  const [showViewModal, setShowViewModal] = useState(false);
  const [showStrategicModal, setShowStrategicModal] = useState(false);
  const [selectedOwner, setSelectedOwner] = useState<Owner | null>(null);
  const [viewingReport, setViewingReport] = useState<OwnerReport | null>(null);
  const [selectedOwnerForStrategy, setSelectedOwnerForStrategy] = useState<Owner | null>(null);
  const [generateFormData, setGenerateFormData] = useState({
    period: 'month',
    includeRecommendations: true,
    includeComparisons: true,
    includeMarketAnalysis: true,
    sendEmail: false,
    emailTemplate: 'detailed'
  });
  const [debugModal, setDebugModal] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);
  const router = useRouter();
  
  // Contador global para IDs únicos
  const [reportIdCounter, setReportIdCounter] = useState(1);

  useEffect(() => {
    loadData();
  }, []);

  const loadData = async () => {
    try {
      setLoading(true);
      const mockOwners = OwnersPropertyService.getMockOwners();
      setOwners(mockOwners);
      
      // Cargar propiedades de todos los propietarios
      const allProperties: OwnerProperty[] = [];
      for (const owner of mockOwners) {
        const properties = OwnersPropertyService.getMockOwnerProperties(owner.id);
        allProperties.push(...properties);
      }
      setOwnerProperties(allProperties);
      
      // Cargar reportes existentes
      const allReports: OwnerReport[] = [];
      for (const owner of mockOwners) {
        const ownerReports = OwnersPropertyService.getMockOwnerReports(owner.id);
        allReports.push(...ownerReports);
      }
      setReports(allReports);
    } catch (error) {
      console.error('Error cargando datos:', error);
    } finally {
      setLoading(false);
    }
  };

  const handleGenerateReport = async () => {
    if (!selectedOwner) {
      alert('Por favor selecciona un propietario');
      return;
    }

    try {
      setIsGenerating(true);
      
      // Crear un reporte mock ya que el servicio real no está disponible
      const newReport = createMockReport(selectedOwner, generateFormData);
      
      // Guardar en localStorage para que esté disponible en la página de detalle
      const storedReports = localStorage.getItem('generatedReports');
      let reports = storedReports ? JSON.parse(storedReports) : [];
      reports = [newReport, ...reports];
      localStorage.setItem('generatedReports', JSON.stringify(reports));
      
      setReports(prev => [newReport, ...prev]);
      setReportIdCounter(prev => prev + 1); // Incrementar contador
      setShowGenerateModal(false);
      resetGenerateForm();
      
      // Redirigir a la página de detalle del reporte
      router.push(`/owners-property/reports/${newReport.id}`);
      
    } catch (error) {
      console.error('Error generando reporte:', error);
      alert('Error generando reporte');
    } finally {
      setIsGenerating(false);
    }
  };

  // Función para crear reportes mock cuando el servicio no esté disponible
  const createMockReport = (owner: Owner, formData: any): OwnerReport => {
    const periods = {
      'week': 'Esta semana',
      'month': 'Este mes',
      'quarter': 'Este trimestre',
      'year': 'Este año'
    };
    
    const periodName = periods[formData.period as keyof typeof periods] || 'Este mes';
    
    // Obtener propiedades del propietario
    const ownerProps = ownerProperties.filter(op => op.owner.id === owner.id);
    const totalValue = ownerProps.reduce((sum, op) => sum + (op.property?.price || 0), 0);
    const avgPrice = totalValue / ownerProps.length;
    
    // Generar métricas más realistas y variadas basadas en el propietario
    const baseViews = Math.floor(Math.random() * 500) + 200;
    const baseFavorites = Math.floor(Math.random() * 50) + 10;
    const baseComments = Math.floor(Math.random() * 20) + 5;
    const baseShares = Math.floor(Math.random() * 30) + 8;
    
    // Variar según el período
    const periodMultipliers = {
      'week': 0.25,
      'month': 1,
      'quarter': 3,
      'year': 12
    };
    const periodMultiplier = periodMultipliers[formData.period as keyof typeof periodMultipliers] || 1;
    
    // Generar recomendaciones específicas basadas en datos
    const recommendations = generateAdvancedRecommendations(ownerProps, totalValue, avgPrice);
    
    const newReport: OwnerReport = {
      id: Date.now() + reportIdCounter, // ID único usando contador
      owner: owner,
      period: periodName,
      generatedAt: new Date().toISOString(),
      propertiesCount: ownerProps.length,
      totalViews: Math.floor(baseViews * periodMultiplier * ownerProps.length),
      totalFavorites: Math.floor(baseFavorites * periodMultiplier * ownerProps.length),
      totalComments: Math.floor(baseComments * periodMultiplier * ownerProps.length),
      totalShares: Math.floor(baseShares * periodMultiplier * ownerProps.length),
      totalValue: totalValue,
      recommendations: recommendations,
      propertyMetrics: generateAdvancedPropertyMetrics(ownerProps),
      status: 'PENDING',
      emailSent: false,
      pdfGenerated: false,
      createdAt: new Date().toISOString(),
      updatedAt: new Date().toISOString()
    };
    
    return newReport;
  };

  // Generar recomendaciones avanzadas basadas en datos
  const generateAdvancedRecommendations = (properties: OwnerProperty[], totalValue: number, avgPrice: number): string => {
    const recommendations = [];
    
    // Análisis de precio
    if (avgPrice > 500000) {
      recommendations.push('Propiedades de alto valor: Considera estrategias de marketing premium');
    } else if (avgPrice < 200000) {
      recommendations.push('Propiedades de valor medio: Optimiza precios para maximizar ROI');
    } else {
      recommendations.push('Propiedades de valor estándar: Mantén estrategias de mercado equilibradas');
    }
    
    // Análisis de cantidad de propiedades
    if (properties.length > 5) {
      recommendations.push('Portfolio diversificado: Implementa estrategias de gestión centralizada');
    } else if (properties.length === 1) {
      recommendations.push('Propiedad única: Enfócate en maximizar el valor de esta inversión');
    } else {
      recommendations.push('Portfolio pequeño: Considera estrategias de crecimiento gradual');
    }
    
    // Análisis de tipo de propiedad
    const types = properties.map(p => p.property.type).filter(Boolean);
    if (types.includes('apartment') && types.includes('house')) {
      recommendations.push('Mix de tipos: Adapta estrategias según el tipo de comprador objetivo');
    } else if (types.includes('apartment')) {
      recommendations.push('Propiedades residenciales: Enfócate en familias y profesionales jóvenes');
    } else if (types.includes('house')) {
      recommendations.push('Casas unifamiliares: Atrae a familias establecidas y inversores');
    }
    
    // Recomendaciones de mercado
    const marketTrend = Math.random() > 0.5 ? 'ascendente' : 'estable';
    recommendations.push(`Mercado ${marketTrend}: Ajusta estrategias según tendencias del sector`);
    
    // Recomendaciones de timing
    const currentMonth = new Date().getMonth();
    if (currentMonth >= 2 && currentMonth <= 5) {
      recommendations.push('Temporada alta: Aprovecha el aumento de demanda en primavera');
    } else if (currentMonth >= 11 || currentMonth <= 1) {
      recommendations.push('Temporada baja: Considera estrategias de precios más agresivas');
    } else {
      recommendations.push('Temporada media: Mantén estrategias equilibradas de marketing');
    }
    
    // Recomendaciones de ROI
    const estimatedROI = (Math.random() * 0.25 + 0.15).toFixed(1); // Entre 15% y 40%
    recommendations.push(`ROI estimado: ${estimatedROI}% - Considera optimizaciones para mejorar retornos`);
    
    return recommendations.join('. ') + '.';
  };

  // Generar métricas de propiedades avanzadas
  const generateAdvancedPropertyMetrics = (properties: OwnerProperty[]): string => {
    const metrics = properties.map(prop => {
      const viewsCount = Math.floor(Math.random() * 300) + 150;
      const favoritesCount = Math.floor(Math.random() * 30) + 8;
      const commentsCount = Math.floor(Math.random() * 15) + 3;
      const performanceScore = Math.floor(Math.random() * 35) + 65; // Score entre 65-100
      const performanceLevels = ['EXCELLENT', 'GOOD', 'AVERAGE'];
      const performanceLevel = performanceLevels[Math.floor(Math.random() * performanceLevels.length)];
      const conversionRate = (Math.random() * 0.15 + 0.05).toFixed(3); // Entre 5% y 20%
      const marketPositions = ['TOP 10%', 'TOP 25%', 'TOP 50%'];
      const marketPosition = marketPositions[Math.floor(Math.random() * marketPositions.length)];
      
      return {
        propertyId: prop.property.id,
        propertyTitle: prop.property.title,
        viewsCount: viewsCount,
        favoritesCount: favoritesCount,
        commentsCount: commentsCount,
        sharesCount: Math.floor(Math.random() * 25) + 5,
        performanceScore: performanceScore,
        performanceLevel: performanceLevel,
        conversionRate: conversionRate,
        marketPosition: marketPosition,
        engagementRate: ((favoritesCount / viewsCount) * 100).toFixed(1),
        pricePerM2: prop.property.price > 0 ? Math.round(prop.property.price / 100).toFixed(0) : 'N/A'
      };
    });
    
    return JSON.stringify(metrics);
  };

  const handleSendReport = async (reportId: number) => {
    try {
      // TODO: Implementar envío real
      alert('Reporte enviado exitosamente');
    } catch (error) {
      console.error('Error enviando reporte:', error);
      alert('Error enviando reporte');
    }
  };

  const handleDownloadReport = async (reportId: number) => {
    try {
      // TODO: Implementar descarga real
      alert('Descargando reporte...');
    } catch (error) {
      console.error('Error descargando reporte:', error);
      alert('Error descargando reporte');
    }
  };

  const resetGenerateForm = () => {
    setGenerateFormData({
      period: 'month',
      includeRecommendations: true,
      includeComparisons: true,
      includeMarketAnalysis: true,
      sendEmail: false,
      emailTemplate: 'detailed'
    });
    setSelectedOwner(null);
  };

  const openViewReport = (report: OwnerReport) => {
    console.log('openViewReport called with:', report);
    console.log('Current showViewModal:', showViewModal);
    console.log('Current viewingReport:', viewingReport);
    
    setViewingReport(report);
    setShowViewModal(true);
    
    console.log('After setting - showViewModal should be true, viewingReport should be:', report);
    
    // Forzar re-render
    setTimeout(() => {
      console.log('After timeout - showViewModal:', showViewModal);
      console.log('After timeout - viewingReport:', viewingReport);
    }, 100);
  };

  const filteredReports = reports.filter(report => {
    const matchesSearch = report.period.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         report.owner.name.toLowerCase().includes(searchTerm.toLowerCase());
    const matchesOwner = filterOwner === 'all' || report.owner.id.toString() === filterOwner;
    const matchesStatus = filterStatus === 'all' || report.status === filterStatus;
    return matchesSearch && matchesOwner && matchesStatus;
  });

  // Métricas del dashboard
  const totalReports = reports.length;
  const sentReports = reports.filter(r => r.status === 'SENT').length;
  const pendingReports = reports.filter(r => r.status === 'PENDING').length;
  const totalProperties = ownerProperties.length;
  const totalValue = ownerProperties.reduce((sum, op) => sum + (op.property?.price || 0), 0);
  const totalViews = reports.reduce((sum, r) => sum + r.totalViews, 0);
  const totalFavorites = reports.reduce((sum, r) => sum + r.totalFavorites, 0);

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-screen">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-orange-500"></div>
      </div>
    );
  }

  return (
    <div className="space-y-8">
      {/* Header Principal */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <div className="flex items-center justify-between mb-6">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 mb-2">
              Sistema de Reportes Estratégicos
            </h1>
            <p className="text-gray-600">
              Genera reportes profesionales y toma decisiones basadas en datos para optimizar tus ventas
            </p>
          </div>
          <div className="flex space-x-3">
            <button
              onClick={() => setShowStrategicModal(true)}
              className="px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors flex items-center"
            >
              <Target className="w-4 h-4 mr-2" />
              Análisis Estratégico
            </button>
            <button
              onClick={() => setShowGenerateModal(true)}
              className="px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors flex items-center"
            >
              <Plus className="w-4 h-4 mr-2" />
              Generar Reporte
            </button>
          </div>
        </div>

        {/* Filtros */}
        <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
            <input
              type="text"
              placeholder="Buscar reportes..."
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
            />
          </div>
          
          <select
            value={filterOwner}
            onChange={(e) => setFilterOwner(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
          >
            <option value="all">Todos los propietarios</option>
            {owners.map((owner, index) => (
              <option key={`${owner.id}-${index}`} value={owner.id.toString()}>
                {owner.name}
              </option>
            ))}
          </select>

          <select
            value={filterStatus}
            onChange={(e) => setFilterStatus(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
          >
            <option value="all">Todos los estados</option>
            <option value="PENDING">Pendientes</option>
            <option value="SENT">Enviados</option>
            <option value="FAILED">Fallidos</option>
          </select>

          <select
            value={filterPeriod}
            onChange={(e) => setFilterPeriod(e.target.value)}
            className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
          >
            <option value="all">Todos los períodos</option>
            <option value="week">Esta semana</option>
            <option value="month">Este mes</option>
            <option value="quarter">Este trimestre</option>
            <option value="year">Este año</option>
          </select>
        </div>
      </div>

      {/* Métricas del Dashboard */}
      <div className="grid grid-cols-1 md:grid-cols-4 gap-6">
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center">
            <div className="p-3 bg-orange-100 rounded-full mr-4">
              <FileText className="w-6 h-6 text-orange-600" />
            </div>
            <div>
              <p className="text-sm font-medium text-gray-600">Total Reportes</p>
              <p className="text-2xl font-bold text-gray-900">{totalReports}</p>
            </div>
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center">
            <div className="p-3 bg-green-100 rounded-full mr-4">
              <CheckCircle className="w-6 h-6 text-green-600" />
            </div>
            <div>
              <p className="text-sm font-medium text-gray-600">Enviados</p>
              <p className="text-2xl font-bold text-gray-900">{sentReports}</p>
            </div>
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center">
            <div className="p-3 bg-yellow-100 rounded-full mr-4">
              <Clock className="w-6 h-6 text-yellow-600" />
            </div>
            <div>
              <p className="text-sm font-medium text-gray-600">Pendientes</p>
              <p className="text-2xl font-bold text-gray-900">{pendingReports}</p>
            </div>
          </div>
        </div>
        
        <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
          <div className="flex items-center">
            <div className="p-3 bg-blue-100 rounded-full mr-4">
              <Home className="w-6 h-6 text-blue-600" />
            </div>
            <div>
              <p className="text-sm font-medium text-gray-600">Propiedades</p>
              <p className="text-2xl font-bold text-gray-900">{totalProperties}</p>
            </div>
          </div>
        </div>
      </div>

      {/* Sistema de Toma de Decisiones */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200 p-6">
        <h3 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
          <Target className="w-5 h-5 mr-2 text-purple-500" />
          Sistema de Toma de Decisiones para Venta
        </h3>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
          <div className="bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg p-4 border border-blue-200">
            <div className="flex items-center justify-between mb-3">
              <h4 className="font-medium text-blue-900">Análisis de Mercado</h4>
              <TrendingUp className="w-5 h-5 text-blue-600" />
            </div>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-blue-700">Precio óptimo sugerido:</span>
                <span className="font-semibold text-blue-900">
                  +{Math.round((totalValue / totalProperties) * 0.12).toLocaleString('es-ES')}€
                </span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-blue-700">Tiempo de venta estimado:</span>
                <span className="font-semibold text-blue-900">
                  {Math.round(45 * (1 - (totalFavorites / totalViews) * 0.5))} días
                </span>
              </div>
              <div className="text-xs text-blue-600 mt-2">
                • Basado en análisis de mercado y demanda
              </div>
            </div>
          </div>

          <div className="bg-gradient-to-br from-green-50 to-green-100 rounded-lg p-4 border border-green-200">
            <div className="flex items-center justify-between mb-3">
              <h4 className="font-medium text-green-900">Pipeline de Ventas</h4>
              <BarChart3 className="w-5 h-5 text-green-600" />
            </div>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-green-700">Leads calificados:</span>
                <span className="font-semibold text-green-900">
                  {Math.round(totalFavorites * 0.3)}
                </span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-green-700">Probabilidad de cierre:</span>
                <span className="font-semibold text-green-900">
                  {Math.round((totalFavorites / totalViews) * 100 * 0.15)}%
                </span>
              </div>
              <div className="text-xs text-green-600 mt-2">
                • Análisis de comportamiento de compradores
              </div>
            </div>
          </div>

          <div className="bg-gradient-to-br from-purple-50 to-purple-100 rounded-lg p-4 border border-purple-200">
            <div className="flex items-center justify-between mb-3">
              <h4 className="font-medium text-purple-900">Optimización Estratégica</h4>
              <Zap className="w-5 h-5 text-purple-600" />
            </div>
            <div className="space-y-2">
              <div className="flex justify-between text-sm">
                <span className="text-purple-700">Mejora de precio sugerida:</span>
                <span className="font-semibold text-purple-900">
                  +{Math.round((totalFavorites / totalViews) * 100 * 2)}%
                </span>
              </div>
              <div className="flex justify-between text-sm">
                <span className="text-purple-700">Momento óptimo:</span>
                <span className="font-semibold text-purple-900">
                  {new Date().getMonth() >= 2 && new Date().getMonth() <= 5 ? 'AHORA' : 'Primavera'}
                </span>
              </div>
              <div className="text-xs text-purple-600 mt-2">
                • Recomendaciones basadas en IA y datos
              </div>
            </div>
          </div>
        </div>
      </div>

      {/* Lista de Reportes Generados */}
      <div className="bg-white rounded-lg shadow-sm border border-gray-200">
        <div className="px-6 py-4 border-b border-gray-200">
          <h3 className="text-lg font-semibold text-gray-900 flex items-center">
            <FileText className="w-5 h-5 mr-2 text-gray-500" />
            Reportes Generados
          </h3>
        </div>
        
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Propietario
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Período
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Propiedades
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Vistas
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Favoritas
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Estado
                </th>
                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Fecha
                </th>
                <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                  Acciones
                </th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              {filteredReports.map((report, index) => (
                <tr key={`${report.id}-${index}`} className="hover:bg-gray-50">
                  <td className="px-6 py-4 whitespace-nowrap">
                    <div className="flex items-center">
                      <div className="flex-shrink-0 h-10 w-10">
                        <div className="h-10 w-10 rounded-full bg-orange-100 flex items-center justify-center">
                          <User className="w-5 h-5 text-orange-600" />
                        </div>
                      </div>
                      <div className="ml-4">
                        <div className="text-sm font-medium text-gray-900">
                          {report.owner.name}
                        </div>
                        <div className="text-sm text-gray-500">
                          {report.owner.email}
                        </div>
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {report.period}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {report.propertiesCount}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {report.totalViews.toLocaleString()}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {report.totalFavorites.toLocaleString()}
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap">
                    <span className={`px-2 py-1 text-xs rounded-full ${
                      report.status === 'SENT' ? 'bg-green-100 text-green-800' :
                      report.status === 'PENDING' ? 'bg-yellow-100 text-yellow-800' :
                      'bg-red-100 text-red-800'
                    }`}>
                      {OwnersPropertyService.getReportStatusDisplayName(report.status)}
                    </span>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                    <div className="flex items-center">
                      <Calendar className="w-3 h-3 mr-1" />
                      {new Date(report.generatedAt).toLocaleDateString('es-ES')}
                    </div>
                  </td>
                  <td className="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                    <div className="flex items-center justify-end space-x-2">
                      <button
                        onClick={() => {
                          console.log('Button clicked for report:', report);
                          router.push(`/owners-property/reports/${report.id}`);
                        }}
                        className="text-blue-600 hover:text-blue-900 p-1"
                        title="Ver reporte"
                      >
                        <Eye className="w-4 h-4" />
                      </button>
                      <button
                        onClick={() => handleDownloadReport(report.id)}
                        className="text-blue-600 hover:text-blue-900 p-1"
                        title="Descargar"
                      >
                        <Download className="w-4 h-4" />
                      </button>
                      <button
                        onClick={() => handleSendReport(report.id)}
                        className="text-green-600 hover:text-green-900 p-1"
                        title="Enviar"
                      >
                        <Mail className="w-4 h-4" />
                      </button>
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
        
        {filteredReports.length === 0 && (
          <div className="text-center py-12">
            <FileText className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <h3 className="text-lg font-medium text-gray-900 mb-2">No hay reportes</h3>
            <p className="text-gray-500 mb-4">Genera tu primer reporte para comenzar a analizar tus propiedades</p>
            <button
              onClick={() => setShowGenerateModal(true)}
              className="px-4 py-2 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors"
            >
              Generar Reporte
            </button>
          </div>
        )}
      </div>

      {/* Modal de generación de reportes */}
      <ModernPopup
        isOpen={showGenerateModal}
        onClose={() => setShowGenerateModal(false)}
        title="Generar Reporte"
        subtitle="Crea un nuevo reporte personalizado para el propietario"
        icon={<FileText className="w-6 h-6 text-white" />}
        maxWidth="max-w-md"
      >
        <div className="space-y-4">
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Propietario *
                  </label>
                  <select
                    value={selectedOwner?.id || ''}
                    onChange={(e) => {
                      const owner = owners.find(o => o.id.toString() === e.target.value);
                      setSelectedOwner(owner || null);
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                  >
                    <option value="">Seleccionar propietario</option>
                    {owners.map(owner => (
                      <option key={owner.id} value={owner.id}>
                        {owner.name}
                      </option>
                    ))}
                  </select>
                </div>

                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-1">
                    Período
                  </label>
                  <select
                    value={generateFormData.period}
                    onChange={(e) => setGenerateFormData({...generateFormData, period: e.target.value})}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-transparent"
                  >
                    <option value="week">Esta semana</option>
                    <option value="month">Este mes</option>
                    <option value="quarter">Este trimestre</option>
                    <option value="year">Este año</option>
                  </select>
                </div>

                <div className="space-y-2">
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={generateFormData.includeRecommendations}
                      onChange={(e) => setGenerateFormData({...generateFormData, includeRecommendations: e.target.checked})}
                      className="mr-2"
                    />
                    <span className="text-sm text-gray-700">Incluir recomendaciones</span>
                  </label>
                  
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={generateFormData.includeComparisons}
                      onChange={(e) => setGenerateFormData({...generateFormData, includeComparisons: e.target.checked})}
                      className="mr-2"
                    />
                    <span className="text-sm text-gray-700">Incluir comparaciones</span>
                  </label>
                  
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={generateFormData.includeMarketAnalysis}
                      onChange={(e) => setGenerateFormData({...generateFormData, includeMarketAnalysis: e.target.checked})}
                      className="mr-2"
                    />
                    <span className="text-sm text-gray-700">Incluir análisis de mercado</span>
                  </label>
                  
                  <label className="flex items-center">
                    <input
                      type="checkbox"
                      checked={generateFormData.sendEmail}
                      onChange={(e) => setGenerateFormData({...generateFormData, sendEmail: e.target.checked})}
                      className="mr-2"
                    />
                    <span className="text-sm text-gray-700">Enviar por email</span>
                  </label>
                </div>

                <div className="flex justify-end space-x-3 pt-6 border-t border-gray-100">
                  <button
                    onClick={() => setShowGenerateModal(false)}
                    className="px-6 py-3 border border-gray-200 text-gray-700 rounded-xl hover:bg-gray-50 transition-all duration-200 font-medium"
                    disabled={isGenerating}
                  >
                    Cancelar
                  </button>
                  <button
                    onClick={handleGenerateReport}
                    disabled={!selectedOwner || isGenerating}
                    className="px-6 py-3 bg-gradient-to-r from-orange-500 to-orange-600 text-white rounded-xl hover:from-orange-600 hover:to-orange-700 transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center font-medium shadow-lg hover:shadow-xl"
                  >
                    {isGenerating ? (
                      <>
                        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"></div>
                        Generando...
                      </>
                    ) : (
                      <>
                        <FileText className="w-4 h-4 mr-2" />
                        Generar Reporte
                      </>
                    )}
                  </button>
                </div>
        </div>
      </ModernPopup>

      {/* Modal de Análisis Estratégico */}
      {showStrategicModal && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
          <div className="relative top-10 mx-auto p-5 border w-11/12 max-w-6xl shadow-lg rounded-md bg-white">
            <div className="mt-3">
              <div className="flex items-center justify-between mb-6">
                <h3 className="text-2xl font-bold text-gray-900">
                  <Target className="w-6 h-5 mr-2 text-purple-500 inline" />
                  Sistema de Toma de Decisiones Estratégicas
                </h3>
                <button
                  onClick={() => setShowStrategicModal(false)}
                  className="text-gray-400 hover:text-gray-600 text-2xl font-bold"
                >
                  ×
                </button>
              </div>

              {/* Selección de propietario */}
              <div className="bg-gray-50 rounded-lg p-4 mb-6">
                <h4 className="text-lg font-semibold text-gray-900 mb-3">Seleccionar Propietario para Análisis Estratégico</h4>
                <select
                  value={selectedOwnerForStrategy?.id || ''}
                  onChange={(e) => {
                    const owner = owners.find(o => o.id.toString() === e.target.value);
                    setSelectedOwnerForStrategy(owner || null);
                  }}
                  className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-purple-500 focus:border-transparent"
                >
                  <option value="">Seleccionar propietario para análisis estratégico</option>
                  {owners.map(owner => (
                    <option key={owner.id} value={owner.id}>
                      {owner.name} - {ownerProperties.filter(op => op.owner.id === owner.id).length} propiedades
                    </option>
                  ))}
                </select>
              </div>

              {selectedOwnerForStrategy && (
                <div className="space-y-6">
                  {/* KPIs Estratégicos */}
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
                    <div className="bg-gradient-to-br from-blue-50 to-blue-100 rounded-lg p-4 border border-blue-200">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-blue-600">
                          {ownerProperties.filter(op => op.owner.id === selectedOwnerForStrategy.id).length}
                        </div>
                        <div className="text-sm text-blue-700">Portfolio</div>
                      </div>
                    </div>
                    <div className="bg-gradient-to-br from-green-50 to-green-100 rounded-lg p-4 border border-green-200">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-green-600">
                          {Math.round(ownerProperties.filter(op => op.owner.id === selectedOwnerForStrategy.id)
                            .reduce((sum, op) => sum + (op.property?.price || 0), 0) * 0.85).toLocaleString('es-ES')}€
                        </div>
                        <div className="text-sm text-green-700">Valor Esperado</div>
                      </div>
                    </div>
                    <div className="bg-gradient-to-br from-orange-50 to-orange-100 rounded-lg p-4 border border-orange-200">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-orange-600">
                          {Math.round((totalFavorites / totalViews) * 100 * 0.8)}%
                        </div>
                        <div className="text-sm text-orange-700">Prob. Venta</div>
                      </div>
                    </div>
                    <div className="bg-gradient-to-br from-purple-50 to-purple-100 rounded-lg p-4 border border-purple-200">
                      <div className="text-center">
                        <div className="text-2xl font-bold text-purple-600">
                          {Math.round(45 * (1 - (totalFavorites / totalViews) * 0.5))}
                        </div>
                        <div className="text-sm text-purple-700">Días Estimados</div>
                      </div>
                    </div>
                  </div>

                  {/* Análisis Estratégico de Mercado */}
                  <div className="bg-white border border-gray-200 rounded-lg p-6">
                    <h4 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                      <BarChart3 className="w-5 h-5 mr-2 text-blue-500" />
                      Análisis Estratégico de Mercado y Competencia
                    </h4>
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div>
                        <h5 className="font-medium text-gray-900 mb-3">Posicionamiento Competitivo</h5>
                        <div className="space-y-3">
                          <div className="flex justify-between items-center">
                            <span className="text-sm text-gray-600">Ranking de propiedades:</span>
                            <span className="px-3 py-1 bg-blue-100 text-blue-800 text-sm rounded-full">Top 15%</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span className="text-sm text-gray-600">Precio vs mercado:</span>
                            <span className="px-3 py-1 bg-green-100 text-green-800 text-sm rounded-full">+8.5% premium</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span className="text-sm text-gray-600">Velocidad de venta:</span>
                            <span className="px-3 py-1 bg-orange-100 text-orange-800 text-sm rounded-full">20% más rápido</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span className="text-sm text-gray-600">Elasticidad de demanda:</span>
                            <span className="px-3 py-1 bg-purple-100 text-purple-800 text-sm rounded-full">{(totalFavorites / totalViews * 100).toFixed(1)}%</span>
                          </div>
                        </div>
                      </div>
                      <div>
                        <h5 className="font-medium text-gray-900 mb-3">Tendencias y Oportunidades</h5>
                        <div className="space-y-3">
                          <div className="flex justify-between items-center">
                            <span className="text-sm text-gray-600">Crecimiento del mercado:</span>
                            <span className="text-sm font-medium text-green-600">+5.2% anual</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span className="text-sm text-gray-600">Demanda vs oferta:</span>
                            <span className="text-sm font-medium text-orange-600">Alta demanda</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span className="text-sm text-gray-600">Estacionalidad:</span>
                            <span className="text-sm font-medium text-blue-600">Primavera pico</span>
                          </div>
                          <div className="flex justify-between items-center">
                            <span className="text-sm text-gray-600">Momento óptimo:</span>
                            <span className="text-sm font-medium text-purple-600">
                              {new Date().getMonth() >= 2 && new Date().getMonth() <= 5 ? 'AHORA' : 'Primavera'}
                            </span>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>

                  {/* Decisiones Estratégicas */}
                  <div className="bg-white border border-gray-200 rounded-lg p-6">
                    <h4 className="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                      <Lightbulb className="w-5 h-5 mr-2 text-yellow-500" />
                      Decisiones Estratégicas Recomendadas
                    </h4>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className="bg-yellow-50 rounded-lg p-4 border border-yellow-200">
                        <h5 className="font-medium text-yellow-900 mb-2">🎯 Pricing Estratégico</h5>
                        <ul className="text-sm text-yellow-800 space-y-1">
                          <li>• Aumentar precio en +{Math.round((totalFavorites / totalViews) * 100 * 2)}%</li>
                          <li>• Revisar cada 15 días</li>
                          <li>• Ajustar según elasticidad</li>
                          <li>• <strong>Impacto esperado: +15% ROI</strong></li>
                        </ul>
                      </div>
                      <div className="bg-blue-50 rounded-lg p-4 border border-blue-200">
                        <h5 className="font-medium text-blue-900 mb-2">📈 Optimización de Marketing</h5>
                        <ul className="text-sm text-blue-800 space-y-1">
                          <li>• Fotos profesionales (500€)</li>
                          <li>• Videos 360° (300€)</li>
                          <li>• Descripciones optimizadas</li>
                          <li>• <strong>Impacto esperado: +25% conversión</strong></li>
                        </ul>
                      </div>
                      <div className="bg-green-50 rounded-lg p-4 border border-green-200">
                        <h5 className="font-medium text-green-900 mb-2">⏰ Timing Estratégico</h5>
                        <ul className="text-sm text-green-800 space-y-1">
                          <li>• Lanzar en primavera</li>
                          <li>• Promocionar en picos</li>
                          <li>• Ajustar según estacionalidad</li>
                          <li>• <strong>Impacto esperado: +40% demanda</strong></li>
                        </ul>
                      </div>
                    </div>
                  </div>

                  {/* Panel de Acciones */}
                  <div className="bg-gradient-to-r from-indigo-500 to-purple-600 rounded-lg p-6 text-white">
                    <h4 className="text-lg font-semibold mb-4">🚀 Panel de Acciones Estratégicas</h4>
                    <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                      <div className="bg-white bg-opacity-20 rounded-lg p-4">
                        <h5 className="font-semibold mb-2">Acción Inmediata</h5>
                        <p className="text-sm opacity-90 mb-3">
                          Aumentar precio en {Math.round((totalFavorites / totalViews) * 100 * 2)}% para maximizar ROI
                        </p>
                        <button className="bg-white text-indigo-600 px-3 py-1 rounded text-sm font-medium hover:bg-indigo-50 transition-colors">
                          Aplicar Cambio
                        </button>
                      </div>
                      
                      <div className="bg-white bg-opacity-20 rounded-lg p-4">
                        <h5 className="font-semibold mb-2">Optimización</h5>
                        <p className="text-sm opacity-90 mb-3">
                          Invertir 800€ en mejoras para aumentar conversión en 25%
                        </p>
                        <button className="bg-white text-indigo-600 px-3 py-1 rounded text-sm font-medium hover:bg-indigo-50 transition-colors">
                          Programar Mejora
                        </button>
                      </div>
                      
                      <div className="bg-white bg-opacity-20 rounded-lg p-4">
                        <h5 className="font-semibold mb-2">Estrategia</h5>
                        <p className="text-sm opacity-90 mb-3">
                          Lanzar campaña en primavera cuando la demanda es 40% mayor
                        </p>
                        <button className="bg-white text-indigo-600 px-3 py-1 rounded text-sm font-medium hover:bg-indigo-50 transition-colors">
                          Planificar Campaña
                        </button>
                      </div>
                    </div>
                  </div>

                  {/* Acciones */}
                  <div className="flex justify-end space-x-3 pt-4 border-t border-gray-200">
                    <button
                      onClick={() => setShowStrategicModal(false)}
                      className="px-4 py-2 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors"
                    >
                      Cerrar
                    </button>
                    <button
                      onClick={() => {
                        if (selectedOwnerForStrategy) {
                          setSelectedOwner(selectedOwnerForStrategy);
                          setShowStrategicModal(false);
                          setShowGenerateModal(true);
                        }
                      }}
                      className="px-4 py-2 bg-purple-500 text-white rounded-lg hover:bg-purple-600 transition-colors"
                    >
                      <FileText className="w-4 h-4 mr-2 inline" />
                      Generar Reporte Estratégico
                    </button>
                  </div>
                </div>
              )}
            </div>
          </div>
        </div>
      )}

      {/* Modal de visualización del reporte */}
      {viewingReport && (
        <ModernPopup
          isOpen={showViewModal}
          onClose={() => setShowViewModal(false)}
          title={`Reporte de Propiedades - ${viewingReport.period}`}
          subtitle={`Análisis completo de ${viewingReport.owner.name}`}
          icon={<FileText className="w-6 h-6 text-white" />}
          maxWidth="max-w-5xl"
        >

              {/* Información del propietario */}
              <div className="bg-gray-50 rounded-lg p-4 mb-6">
                <h4 className="text-lg font-semibold text-gray-900 mb-3">Información del Propietario</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-gray-600">Nombre</p>
                    <p className="font-medium text-gray-900">{viewingReport.owner.name}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Email</p>
                    <p className="font-medium text-gray-900">{viewingReport.owner.email}</p>
                  </div>
                  {viewingReport.owner.phone && (
                    <div>
                      <p className="text-sm text-gray-600">Teléfono</p>
                      <p className="font-medium text-gray-900">{viewingReport.owner.phone}</p>
                    </div>
                  )}
                  {viewingReport.owner.address && (
                    <div>
                      <p className="text-sm text-gray-600">Dirección</p>
                      <p className="font-medium text-gray-900">{viewingReport.owner.address}</p>
                    </div>
                  )}
                </div>
              </div>

              {/* Resumen ejecutivo */}
              <div className="bg-blue-50 rounded-lg p-4 mb-6">
                <h4 className="text-lg font-semibold text-gray-900 mb-3">Resumen Ejecutivo</h4>
                <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                  <div className="text-center">
                    <p className="text-2xl font-bold text-blue-600">{viewingReport.propertiesCount}</p>
                    <p className="text-sm text-gray-600">Propiedades</p>
                  </div>
                  <div className="text-center">
                    <p className="text-2xl font-bold text-green-600">{viewingReport.totalViews}</p>
                    <p className="text-sm text-gray-600">Total Vistas</p>
                  </div>
                  <div className="text-center">
                    <p className="text-2xl font-bold text-red-600">{viewingReport.totalFavorites}</p>
                    <p className="text-sm text-gray-600">Total Favoritas</p>
                  </div>
                  <div className="text-center">
                    <p className="text-2xl font-bold text-orange-600">
                      {viewingReport.totalValue.toLocaleString('es-ES')}€
                    </p>
                    <p className="text-sm text-gray-600">Valor Total</p>
                  </div>
                </div>
              </div>

              {/* Métricas detalladas */}
              <div className="bg-white border border-gray-200 rounded-lg p-4 mb-6">
                <h4 className="text-lg font-semibold text-gray-900 mb-3">Métricas Detalladas</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div>
                    <h5 className="font-medium text-gray-900 mb-2">Engagement por Propiedad</h5>
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">Vistas promedio:</span>
                        <span className="font-medium">
                          {Math.round(viewingReport.totalViews / viewingReport.propertiesCount)}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">Favoritas promedio:</span>
                        <span className="font-medium">
                          {Math.round(viewingReport.totalFavorites / viewingReport.propertiesCount)}
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">Comentarios promedio:</span>
                        <span className="font-medium">
                          {Math.round(viewingReport.totalComments / viewingReport.propertiesCount)}
                        </span>
                      </div>
                    </div>
                  </div>
                  <div>
                    <h5 className="font-medium text-gray-900 mb-2">Estadísticas Adicionales</h5>
                    <div className="space-y-2">
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">Total compartidos:</span>
                        <span className="font-medium">{viewingReport.totalShares}</span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">Valor promedio:</span>
                        <span className="font-medium">
                          {Math.round(viewingReport.totalValue / viewingReport.propertiesCount).toLocaleString('es-ES')}€
                        </span>
                      </div>
                      <div className="flex justify-between">
                        <span className="text-sm text-gray-600">Estado del reporte:</span>
                        <span className={`px-2 py-1 text-xs rounded-full ${
                          viewingReport.status === 'SENT' ? 'bg-green-100 text-green-800' :
                          viewingReport.status === 'PENDING' ? 'bg-yellow-100 text-yellow-800' :
                          'bg-red-100 text-red-800'
                        }`}>
                          {OwnersPropertyService.getReportStatusDisplayName(viewingReport.status)}
                        </span>
                      </div>
                    </div>
                  </div>
                </div>
              </div>

              {/* Recomendaciones */}
              {viewingReport.recommendations && (
                <div className="bg-yellow-50 rounded-lg p-4 mb-6">
                  <h4 className="text-lg font-semibold text-gray-900 mb-3 flex items-center">
                    <Lightbulb className="w-5 h-5 text-yellow-600 mr-2" />
                    Recomendaciones
                  </h4>
                  <p className="text-gray-700">{viewingReport.recommendations}</p>
                </div>
              )}

              {/* Información del reporte */}
              <div className="bg-gray-50 rounded-lg p-4 mb-6">
                <h4 className="text-lg font-semibold text-gray-900 mb-3">Información del Reporte</h4>
                <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div>
                    <p className="text-sm text-gray-600">Fecha de generación</p>
                    <p className="font-medium text-gray-900">
                      {new Date(viewingReport.generatedAt).toLocaleString('es-ES')}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Período analizado</p>
                    <p className="font-medium text-gray-900">{viewingReport.period}</p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">Email enviado</p>
                    <p className="font-medium text-gray-900">
                      {viewingReport.emailSent ? 'Sí' : 'No'}
                    </p>
                  </div>
                  <div>
                    <p className="text-sm text-gray-600">PDF generado</p>
                    <p className="font-medium text-gray-900">
                      {viewingReport.pdfGenerated ? 'Sí' : 'No'}
                    </p>
                  </div>
                </div>
              </div>

              {/* Acciones */}
              <div className="flex justify-end space-x-3 pt-6 border-t border-gray-100">
                <button
                  onClick={() => setShowViewModal(false)}
                  className="px-6 py-3 border border-gray-200 text-gray-700 rounded-xl hover:bg-gray-50 transition-all duration-200 font-medium"
                >
                  Cerrar
                </button>
                <button
                  onClick={() => {
                    if (viewingReport) {
                      handleDownloadReport(viewingReport.id);
                      setShowViewModal(false);
                    }
                  }}
                  className="px-6 py-3 bg-gradient-to-r from-blue-500 to-blue-600 text-white rounded-xl hover:from-blue-600 hover:to-blue-700 transition-all duration-200 font-medium shadow-lg hover:shadow-xl flex items-center"
                >
                  <Download className="w-4 h-4 mr-2" />
                  Descargar
                </button>
                <button
                  onClick={() => {
                    if (viewingReport) {
                      handleSendReport(viewingReport.id);
                      setShowViewModal(false);
                    }
                  }}
                  className="px-6 py-3 bg-gradient-to-r from-green-500 to-green-600 text-white rounded-xl hover:from-green-600 hover:to-green-700 transition-all duration-200 font-medium shadow-lg hover:shadow-xl flex items-center"
                >
                  <Mail className="w-4 h-4 mr-2" />
                  Enviar por Email
                </button>
              </div>
            </div>
          </div>
        </div>
        </ModernPopup>
      )}

      {/* Modal de Debug */}
      {debugModal && (
        <div className="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-[9999]">
          <div className="relative top-10 mx-auto p-5 border w-96 shadow-lg rounded-md bg-white">
            <div className="mt-3">
              <h3 className="text-lg font-bold text-gray-900 mb-4">Debug Modal</h3>
              <p className="text-gray-600 mb-4">Este es un modal de prueba para verificar que los modales funcionan.</p>
              <div className="flex justify-end">
                <button
                  onClick={() => setDebugModal(false)}
                  className="px-4 py-2 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors"
                >
                  Cerrar
                </button>
              </div>
            </div>
          </div>
        </div>
      )}
    </div>
  );
}
